Parameters:
    EnvironmentName:
        Description: The Environment Name (will be prefixed to resource names)
        Type: String

    UbuntuImageId:
        Description: Ubuntu 18.04 image id
        Type: String

    BastionHostKey:
        Description: Key to access bastion host
        Type: String

    PrivateServerKey:
        Description: Key to access servers in private subnets from bastion host
        Type: String

Resources:

    ## IAM PROFILE WITH ROLES
    WebAppInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
                - UdagramS3ReadOnly

    ## SECURITY GROUPS
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP access to our Load Balancer
            VpcId:
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VPCID
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow HTTP to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VPCID
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                # NOTE: for troubleshooting purposes open port 22 for SSH from anywhere
                # TODO: remove when done troubleshooting
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  #CidrIp: 0.0.0.0/0
                  SourceSecurityGroupId: !Ref BastionHostSecurityGroup
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    BastionHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Groupt for troubleshooting using a bastion host 
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: ${EnvironmentName}-VPCID
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    ## LAUNCH CONFIGURATION
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #! /bin/bash
                    apt-get update -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    echo "It works! Udagram, Udacity!" > index.html
            ImageId: !Sub ${UbuntuImageId} #Ubuntu Server 18.04 LTS (HVM), SSD Volume Type
            # NOTE: for troubleshooting connect from the jumpbox in public subnet
            # TODO: remove after troubleshooting
            KeyName: !Sub ${PrivateServerKey}
            IamInstanceProfile: !Ref WebAppInstanceProfile
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs: 
                    VolumeSize: "10"

    ## AUTOSCALING GROUP
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '2'
            MaxSize: '8'
            DesiredCapacity: '4'
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    ## LOAD BALANCER
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
            SecurityGroups:
                - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 5
            Port: 80
            Protocol: HTTP
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: ${EnvironmentName}-VPCID

    BastionHostServer:
        Description: Bastion Host for troubleshooting private servers
        Type: AWS::EC2::Instance
        Properties:
            IamInstanceProfile: !Ref WebAppInstanceProfile
            ImageId: !Sub ${UbuntuImageId}
            InstanceType: t2.micro
            KeyName: !Sub ${BastionHostKey}
            SubnetId: 
                Fn::ImportValue: 
                    Fn::Sub: ${EnvironmentName}-PUB1-SN
            SecurityGroupIds:
                - Ref: BastionHostSecurityGroup
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-BastionHost


# Create outputs for convenience
Outputs:

    PublicURL:
        Description: Public URL for convenience
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-PUBL-URL

    BastionHostPublicIp:
        Description: Public IP for the Bastion Host
        Value: !GetAtt BastionHostServer.PublicIp
        Export:
            Name: !Sub ${EnvironmentName}-BastionHost-PublicIP
